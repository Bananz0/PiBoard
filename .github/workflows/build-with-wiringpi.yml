name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
    
      # - name: Install Qt
      #   uses: jurplel/install-qt-action@v3
      #   with:
      #     version: '6.4.2'
      #     host: 'linux'
      #     target: 'desktop'
      #     arch: 'gcc_64'
      #     dir: '${{github.workspace}}/qt/'
      #     install-deps: 'true'


      # - name: List files in Qt
      #   run: find ${{env.Qt6_Dir}}

      # - name: Install WiringPi
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y git
      #     git clone https://github.com/WiringPi/WiringPi.git
      #     cd WiringPi
      #     ./build debian
      #     mv debian-template/wiringpi_3.2_amd64.deb .
      #     sudo apt install ./wiringpi_3.2_amd64.deb        


      - name: Configure CMake
        run: cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_PREFIX_PATH="${{env.Qt6_Dir}}/lib/cmake/" -DQt6_DIR=${{env.Qt6_Dir}}/lib/cmake/Qt6/ -G "Unix Makefiles" -B '${{github.workspace}}'/build

      - name: Build
        run: cmake --build '${{github.workspace}}'/build --target all

      - name: List files in build directory
        run: ls -la ./build

      # - name: Package Artifacts
      #   run: |
      #     mkdir package
      #     cp ./build/your-binary package/
      #     zip -r your-binary-or-package.zip package

      # - name: Create Release
      #   id: create_release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     release_tag="${GITHUB_REF##*/}"
      #     release_name="${release_tag}"
      #     echo "Release tag: $release_tag"
      #     echo "Release name: $release_name"
      #     echo "release_tag=$release_tag" >> $GITHUB_OUTPUT
      #     echo "release_id=$release_id" >> $GITHUB_OUTPUT

      #     release_id=$(gh release create "$release_tag" --name "$release_name" --generate-notes --output tailed | tail -n 1 | cut -d' ' -f3)
      #     echo "release_name=$release_name" >> $GITHUB_OUTPUT

      # - name: Upload Release Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./your-binary-or-package.zip
      #     asset_name: your-binary-or-package.zip
      #     asset_content_type: application/zip
