name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
    
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.4.2'
          host: 'linux'
          target: 'desktop'
          arch: 'gcc_64'
          dir: '${{github.workspace}}/qt/'
          install-deps: 'true'


      - name: List files in Qt
        run: find ${{env.Qt6_Dir}}

      - name: Install WiringPi
        run: |
          sudo apt-get update
          sudo apt-get install -y git
          git clone https://github.com/WiringPi/WiringPi.git
          cd WiringPi
          ./build debian
          mv debian-template/wiringpi_3.2_amd64.deb .
          sudo apt install ./wiringpi_3.2_amd64.deb        

      - name: Configure CMake
        run: cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_PREFIX_PATH="${{env.Qt6_Dir}}/lib/cmake/" -DQt6_DIR=${{env.Qt6_Dir}}/lib/cmake/Qt6/ -G "Unix Makefiles" -B '${{github.workspace}}'/build

      - name: Build
        run: cmake --build '${{github.workspace}}'/build --target all

      - name: Package Artifacts
        run: |
          mkdir PiBoard
          cp ./build/PiBoard PiBoard/
          zip -r PiBoard.zip PiBoard
  
      - name: Get Version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_SHA}

      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./PiBoard.zip
          asset_name: PiBoard.zip
          asset_content_type: application/zip
