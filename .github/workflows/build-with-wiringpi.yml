name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
    
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.4.2'
          host: 'linux'
          target: 'desktop'
          arch: 'gcc_64'
          dir: '${{github.workspace}}/qt/'
          install-deps: 'true'


      - name: List files in Qt
        run: find ${{env.Qt6_Dir}}

      - name: Install WiringPi
        run: |
          sudo apt-get update
          sudo apt-get install -y git
          git clone https://github.com/WiringPi/WiringPi.git
          cd WiringPi
          ./build debian
          mv debian-template/wiringpi_3.2_amd64.deb .
          sudo apt install ./wiringpi_3.2_amd64.deb        


      - name: Configure CMake
        run: cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_PREFIX_PATH="${{env.Qt6_Dir}}/lib/cmake/" -DQt6_DIR=${{env.Qt6_Dir}}/lib/cmake/Qt6/ -G "Unix Makefiles" -B '${{github.workspace}}'/build

      - name: Build
        run: cmake --build '${{github.workspace}}'/build --target all

      - name: List files in build directory
        run: ls -la ./build

      - name: Package Artifacts
        run: |
          mkdir package
          cp ./build/PiBoard package/
          zip -r PiBoard.zip package

      - name: Update Release and Upload Asset
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          release_tag="${GITHUB_REF##*/}"
          release_name="${release_tag}"
          echo "Release tag: $release_tag"
          echo "Release name: $release_name"
          release_id=$(gh release list --json tagName --jq ".[] | select(.tagName==\"$release_tag\") | .id")
          if [ -z "$release_id" ]; then
            echo "No existing release found with tag $release_tag. Creating a new release."
            release_id=$(gh release create "$release_tag" --name "$release_name" --generate-notes --output tailed | tail -n 1 | cut -d' ' -f3)
          else
            echo "Updating existing release with id $release_id."
          fi
          gh release upload "$release_id" ./PiBoard.zip
